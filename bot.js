import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import Imap from 'imap';
import { simpleParser } from 'mailparser';
import express from 'express';
import config from './config.js';
import { connect, users, trustSpecials, amMails } from './db.js';
import fs from 'fs/promises';
import path from 'path';

// –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤):
const adminBroadcastState = {};
const userStates = {};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
connect().then(() => {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB —É—Å–ø–µ—à–Ω–∞');
}).catch(e => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', e);
});

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.telegramToken, {
    polling: {
        interval: 300,
        autoStart: true
    }
});
const CRYPTOBOT_API_TOKEN = config.cryptoBotToken;

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling!');
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
    return userId === config.adminId;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
async function sendMainMenu(chatId, deletePrevious = false, msg = null, messageId = null) {
    const trustSpecialCount = await (await trustSpecials()).countDocuments();
    const amMailsCount = await (await amMails()).countDocuments();

    const usersCollection = await users();
    await usersCollection.updateOne(
        { user_id: chatId },
        {
            $setOnInsert: {
                user_id: chatId,
                username: msg?.from?.username || '',
                first_name: msg?.from?.first_name || '',
                last_name: msg?.from?.last_name || '',
                first_seen: new Date(),
                trust_specials: [],
                am_mails: []
            }
        },
        { upsert: true }
    );

    const welcomeText = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—Ç–µ, —Å–¥–µ–ª–∞–Ω–Ω–æ–º –ø–æ–¥ UBT –¥–ª—è —Å–ø–∞–º–∞ TikTok!</b>\n\n` +
        `<b>–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
        `‚Ä¢ –ö—É–ø–∏—Ç—å USA MIX 5-24H –∏–ª–∏ AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã\n` +
        `‚ö†Ô∏è –ë–æ—Ç –Ω–æ–≤—ã–π, –≤–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–±–æ–∏\n\n` +
        `‚ö†Ô∏è –ü–û–õ–£–ß–ê–¢–¨ –ö–û–î–´ –° –ü–û–ß–¢ –° –ë–û–¢–ê –¢–£–¢ üì§ ‚Äî @ubtuniccal_bot\n\n` +
        `üéâ <b>–ß–ê–°–¢–û –°–ö–ò–î–ö–ò, –ë–û–ù–£–°–´</b> —á–∞—Å—Ç–æ —Å–≤—è–∑–∫–∏, –∏–Ω—Ñ–æ –ø–æ–≤–æ–¥—ãüò±`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{ text: `üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ`, callback_data: 'categories' }],
                [{ text: 'üõí –ú–û–ò –ü–û–ö–£–ü–ö–ò üõí', callback_data: 'my_purchases' }],
                [{ text: 'üÜò –ü–û–î–î–ï–†–ñ–ö–ê üÜò', callback_data: 'support' }]
            ]
        })
    };

    if (deletePrevious) {
        bot.sendMessage(chatId, '‚åõ –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...').then(msg => {
            setTimeout(() => bot.deleteMessage(chatId, msg.message_id), 300);
        });
    }

    if (messageId) {
        try {
            return bot.editMessageText(welcomeText, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: options.reply_markup
            });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é:', e);
            await bot.deleteMessage(chatId, messageId);
        }
    }

    return bot.sendPhoto(chatId, 'https://i.ibb.co/spcnyqTy/image-3.png', {
        caption: welcomeText,
        parse_mode: 'HTML',
        reply_markup: options.reply_markup
    });
}

// –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function sendCategoriesMenu(chatId, messageId = null) {
    const trustSpecialCount = await (await trustSpecials()).countDocuments();
    const amMailsCount = await (await amMails()).countDocuments();

    const text = `üìÇ <b>–ö–ê–¢–ï–ì–û–†–ò–ò</b>\n\n` +
        `–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å\n\n` +
        `–û–ø–ª–∞—Ç–∞ —É –Ω–∞—Å CryptoBot - usdt\n\n` +
        `–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫, –∏ —É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ª–∏–≤–∞!\n\n` +
        `–ü–û–õ–£–ß–ê–¢–¨ –ö–û–î–´ –° –ü–û–ß–¢ –° –ë–û–¢–ê –¢–£–¢ üì§ ‚Äî @ubtuniccal_bot\n\n` +
        `–ß–¢–û–ë–´ –ü–û–õ–£–ß–ò–¢–¨ –ö–û–î –° –ü–û–ß–¢–´, –°–ö–ò–î–ê–ô–¢–ï –§–û–†–ú–ê–¢ –¢–û–¢ –ö–û–¢–û–†–´–ô –í–ê–ú –í–´–î–ê–ï–¢ –ë–û–¢, –ü–†–Ø–ú–û –í –≠–¢–û–ì–û –ñ–ï –ë–û–¢–ê –ò –û–ù –í–ê–ú –í–´–î–ê–°–¢ –ö–û–î!\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [{ text: `‚≠êÔ∏è USA MIX 5-24H ‚≠êÔ∏è (${trustSpecialCount}—à—Ç)`, callback_data: 'trust_special_category' }],
                [{ text: `‚≠êÔ∏è AM (G) 5-24H ‚≠êÔ∏è (${amMailsCount}—à—Ç)`, callback_data: 'am_mails_category' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
        }
    };

    if (messageId) {
        try {
            return bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
                reply_markup: options.reply_markup
            });
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', e);
            await bot.deleteMessage(chatId, messageId);
            return bot.sendMessage(chatId, text, options);
        }
    }

    return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é TRUST SPECIAL (USA MIX 5-24H)
async function sendTrustSpecialMenu(chatId) {
    const trustSpecialCount = await (await trustSpecials()).countDocuments();

    const text = `üî• <b>USA MIX 5-24H (${trustSpecialCount}—à—Ç)</b>\n\n` +
        `<b>–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
        `‚úÖ ‚Ä¢ –ö—É–ø–∏—Ç—å USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã\n\n` +
        `–¶–µ–Ω–∞: <b>10 —Ä—É–±–ª–µ–π</b> –∏–ª–∏ <b>0.12 USDT</b> –∑–∞ 1 –∞–∫–∫–∞—É–Ω—Ç\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üí∞ –ö–£–ü–ò–¢–¨ USA MIX 5-24H üí∞', callback_data: 'buy_trust_special' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_categories' }]
            ]
        }
    };

    return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é AM (G) 5-24H
async function sendAmMailsMenu(chatId) {
    const amMailsCount = await (await amMails()).countDocuments();

    const text = `üî• <b>AM (G) 5-24H (${amMailsCount}—à—Ç)</b>\n\n` +
        `<b>–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n` +
        `‚úÖ ‚Ä¢ –ö—É–ø–∏—Ç—å AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã\n\n` +
        `–¶–µ–Ω–∞: <b>10 —Ä—É–±–ª–µ–π</b> –∏–ª–∏ <b>0.12 USDT</b> –∑–∞ 1 –∞–∫–∫–∞—É–Ω—Ç\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üí∞ –ö–£–ü–ò–¢–¨ AM (G) 5-24H üí∞', callback_data: 'buy_am_mails' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_categories' }]
            ]
        }
    };

    return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ TRUST SPECIAL
async function sendTrustSpecialQuantityMenu(chatId) {
    const availableCount = await (await trustSpecials()).countDocuments();
    const maxButton = Math.min(availableCount, 10);

    const quantityButtons = [];
    for (let i = 1; i <= maxButton; i++) {
        quantityButtons.push({ text: `${i}`, callback_data: `trust_special_quantity_${i}` });
    }

    const rows = [];
    for (let i = 0; i < quantityButtons.length; i += 5) {
        rows.push(quantityButtons.slice(i, i + 5));
    }

    rows.push([{ text: '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'trust_special_custom_quantity' }]);
    rows.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'trust_special_category' }]);

    const text = `üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏</b>\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω–æ: <b>${availableCount}</b> –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n` +
        `–¶–µ–Ω–∞: <b>10 –†—É–±–ª–µ–π</b> –∏–ª–∏ <b>0.12 USDT</b> –∑–∞ 1 –∞–∫–∫–∞—É–Ω—Ç`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: rows
        }
    };

    return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ AM (G) 5-24H
async function sendAmMailsQuantityMenu(chatId) {
    const availableCount = await (await amMails()).countDocuments();
    const maxButton = Math.min(availableCount, 10);

    const quantityButtons = [];
    for (let i = 1; i <= maxButton; i++) {
        quantityButtons.push({ text: `${i}`, callback_data: `am_mails_quantity_${i}` });
    }

    const rows = [];
    for (let i = 0; i < quantityButtons.length; i += 5) {
        rows.push(quantityButtons.slice(i, i + 5));
    }

    rows.push([{ text: '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'am_mails_custom_quantity' }]);
    rows.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'am_mails_category' }]);

    const text = `üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏</b>\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω–æ: <b>${availableCount}</b> –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n` +
        `–¶–µ–Ω–∞: <b>10 –†—É–±–ª–µ–π</b> –∏–ª–∏ <b>0.12 USDT</b> –∑–∞ 1 –∞–∫–∫–∞—É–Ω—Ç`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: rows
        }
    };

    return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã TRUST SPECIAL
async function sendTrustSpecialPaymentMenu(chatId, invoiceUrl, quantity) {
    const totalAmount = (0.12 * quantity).toFixed(2);

    const text = `üí≥ <b>–û–ø–ª–∞—Ç–∞ ${quantity} USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n` +
        `–°—É–º–º–∞: <b>${totalAmount} USDT</b>\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –û–ü–õ–ê–¢–ò–¢–¨ –ß–ï–†–ï–ó CRYPTOBOT', url: invoiceUrl }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_trust_special_quantity_menu' }]
            ]
        }
    };

    return bot.sendMessage(chatId, text, options);
}

// –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã AM (G) 5-24H
async function sendAmMailsPaymentMenu(chatId, invoiceUrl, quantity) {
    const totalAmount = (0.12 * quantity).toFixed(2);

    const text = `üí≥ <b>–û–ø–ª–∞—Ç–∞ ${quantity} AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n` +
        `–°—É–º–º–∞: <b>${totalAmount} USDT</b>\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:`;

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –û–ü–õ–ê–¢–ò–¢–¨ –ß–ï–†–ï–ó CRYPTOBOT', url: invoiceUrl }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_am_mails_quantity_menu' }]
            ]
        }
    };

    return bot.sendMessage(chatId, text, options);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è TRUST SPECIAL
async function createTrustSpecialInvoice(userId, quantity) {
    try {
        const transactionId = `buy_trust_special_${userId}_${Date.now()}`;
        const amount = 0.12 * quantity;

        const response = await axios.post('https://pay.crypt.bot/api/createInvoice', {
            asset: 'USDT',
            amount: amount,
            description: `–ü–æ–∫—É–ø–∫–∞ ${quantity} USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤`,
            hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
            paid_btn_name: 'openBot',
            paid_btn_url: 'https://t.me/ubtshope_bot',
            payload: transactionId
        }, {
            headers: {
                'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN,
                'Content-Type': 'application/json'
            }
        });

        const usersCollection = await users();
        await usersCollection.updateOne(
            { user_id: userId },
            {
                $setOnInsert: { user_id: userId, trust_specials: [], am_mails: [] },
                $set: {
                    [`trust_special_transactions.${transactionId}`]: {
                        invoiceId: response.data.result.invoice_id,
                        quantity: quantity,
                        status: 'pending',
                        timestamp: Date.now()
                    }
                }
            },
            { upsert: true }
        );

        return response.data.result.pay_url;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ USA MIX 5-24H:', err.response?.data || err.message);
        return null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è AM (G) 5-24H
async function createAmMailsInvoice(userId, quantity) {
    try {
        const transactionId = `buy_am_mails_${userId}_${Date.now()}`;
        const amount = 0.12 * quantity;

        const response = await axios.post('https://pay.crypt.bot/api/createInvoice', {
            asset: 'USDT',
            amount: amount,
            description: `–ü–æ–∫—É–ø–∫–∞ ${quantity} AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤`,
            hidden_message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
            paid_btn_name: 'openBot',
            paid_btn_url: 'https://t.me/ubtshope_bot',
            payload: transactionId
        }, {
            headers: {
                'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN,
                'Content-Type': 'application/json'
            }
        });

        const usersCollection = await users();
        await usersCollection.updateOne(
            { user_id: userId },
            {
                $setOnInsert: { user_id: userId, trust_specials: [], am_mails: [] },
                $set: {
                    [`am_mails_transactions.${transactionId}`]: {
                        invoiceId: response.data.result.invoice_id,
                        quantity: quantity,
                        status: 'pending',
                        timestamp: Date.now()
                    }
                }
            },
            { upsert: true }
        );

        return response.data.result.pay_url;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ AM (G) 5-24H:', err.response?.data || err.message);
        return null;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã TRUST SPECIAL
async function checkTrustSpecialPayment(invoiceId) {
    try {
        const response = await axios.get(`https://pay.crypt.bot/api/getInvoices?invoice_ids=${invoiceId}`, {
            headers: {
                'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN
            }
        });

        return response.data.result.items[0];
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã USA MIX 5-24H:', err);
        return null;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã AM (G) 5-24H
async function checkAmMailsPayment(invoiceId) {
    try {
        const response = await axios.get(`https://pay.crypt.bot/api/getInvoices?invoice_ids=${invoiceId}`, {
            headers: {
                'Crypto-Pay-API-Token': CRYPTOBOT_API_TOKEN
            }
        });

        return response.data.result.items[0];
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã AM (G) 5-24H:', err);
        return null;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã TRUST SPECIAL
async function handleSuccessfulTrustSpecialPayment(userId, transactionId) {
    const usersCollection = await users();
    const trustSpecialsCollection = await trustSpecials();

    const user = await usersCollection.findOne({ user_id: userId });
    if (!user || !user.trust_special_transactions || !user.trust_special_transactions[transactionId]) {
        return false;
    }

    const quantity = user.trust_special_transactions[transactionId].quantity;

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    const accountsToSell = await trustSpecialsCollection.aggregate([
        { $sample: { size: quantity } }
    ]).toArray();

    if (accountsToSell.length < quantity) {
        await usersCollection.updateOne(
            { user_id: userId },
            { $set: { [`trust_special_transactions.${transactionId}.status`]: 'failed' } }
        );

        await bot.sendMessage(userId,
            `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @igor_Potekov`,
            { parse_mode: 'HTML' });
        return false;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await usersCollection.updateOne(
        { user_id: userId },
        {
            $push: { trust_specials: { $each: accountsToSell.map(a => a.raw) } },
            $set: {
                [`trust_special_transactions.${transactionId}.status`]: 'completed',
                [`trust_special_transactions.${transactionId}.accounts`]: accountsToSell.map(a => a.raw)
            }
        }
    );

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    await trustSpecialsCollection.deleteMany({
        _id: { $in: accountsToSell.map(a => a._id) }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(userId,
        `üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ${quantity} USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤!</b>\n\n` +
        `–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:`,
        { parse_mode: 'HTML' });

    if (quantity > 5) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª .txt
        const filePath = path.join('/tmp', `trust_special_accounts_${userId}_${Date.now()}.txt`);
        const accountsText = accountsToSell.map(a => a.raw).join('\n');
        await fs.writeFile(filePath, accountsText);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.sendDocument(userId, filePath, {
            caption: `üìÑ –í–∞—à–∏ ${quantity} USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ`,
            parse_mode: 'HTML'
        });

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        await fs.unlink(filePath).catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err));
    } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
        for (const account of accountsToSell) {
            await bot.sendMessage(userId, account.raw);
        }
    }

    return true;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã AM (G) 5-24H
async function handleSuccessfulAmMailsPayment(userId, transactionId) {
    const usersCollection = await users();
    const amMailsCollection = await amMails();

    const user = await usersCollection.findOne({ user_id: userId });
    if (!user || !user.am_mails_transactions || !user.am_mails_transactions[transactionId]) {
        return false;
    }

    const quantity = user.am_mails_transactions[transactionId].quantity;

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    const accountsToSell = await amMailsCollection.aggregate([
        { $sample: { size: quantity } }
    ]).toArray();

    if (accountsToSell.length < quantity) {
        await usersCollection.updateOne(
            { user_id: userId },
            { $set: { [`am_mails_transactions.${transactionId}.status`]: 'failed' } }
        );

        await bot.sendMessage(userId,
            `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @igor_Potekov`,
            { parse_mode: 'HTML' });
        return false;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await usersCollection.updateOne(
        { user_id: userId },
        {
            $push: { am_mails: { $each: accountsToSell.map(a => a.raw) } },
            $set: {
                [`am_mails_transactions.${transactionId}.status`]: 'completed',
                [`am_mails_transactions.${transactionId}.accounts`]: accountsToSell.map(a => a.raw)
            }
        }
    );

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    await amMailsCollection.deleteMany({
        _id: { $in: accountsToSell.map(a => a._id) }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(userId,
        `üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ${quantity} AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤!</b>\n\n` +
        `–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:`,
        { parse_mode: 'HTML' });

    if (quantity > 5) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª .txt
        const filePath = path.join('/tmp', `am_mails_accounts_${userId}_${Date.now()}.txt`);
        const accountsText = accountsToSell.map(a => a.raw).join('\n');
        await fs.writeFile(filePath, accountsText);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.sendDocument(userId, filePath, {
            caption: `üìÑ –í–∞—à–∏ ${quantity} AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ`,
            parse_mode: 'HTML'
        });

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        await fs.unlink(filePath).catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err));
    } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
        for (const account of accountsToSell) {
            await bot.sendMessage(userId, account.raw);
        }
    }

    return true;
}

// –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏
async function sendMyPurchasesMenu(chatId) {
    const usersCollection = await users();
    const user = await usersCollection.findOne({ user_id: chatId });

    const hasTrustSpecial = user && user.trust_specials && user.trust_specials.length > 0;
    const hasAmMails = user && user.am_mails && user.am_mails.length > 0;

    if (!hasTrustSpecial && !hasAmMails) {
        return bot.sendMessage(chatId,
            '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.\n' +
            '–ù–∞–∂–º–∏—Ç–µ "–ö–ê–¢–ï–ì–û–†–ò–ò" —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ', callback_data: 'categories' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                    ]
                }
            });
    }

    const buttons = [];
    if (hasTrustSpecial) {
        buttons.push([{ text: 'üî• –ú–æ–∏ USA MIX 5-24H üî•', callback_data: 'my_trust_specials' }]);
    }
    if (hasAmMails) {
        buttons.push([{ text: 'üî• –ú–æ–∏ AM (G) 5-24H üî•', callback_data: 'my_am_mails' }]);
    }
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);

    return bot.sendMessage(chatId, 'üì¶ <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b> üì¶', {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: buttons
        }
    });
}

// –ú–æ–∏ TRUST SPECIAL –∞–∫–∫–∞—É–Ω—Ç—ã
async function sendMyTrustSpecialsMenu(chatId) {
    const usersCollection = await users();
    const user = await usersCollection.findOne({ user_id: chatId });

    if (!user || !user.trust_specials || user.trust_specials.length === 0) {
        return bot.sendMessage(chatId,
            '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n' +
            '–ö—É–ø–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ USA MIX 5-24H!', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ', callback_data: 'categories' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                    ]
                }
            });
    }

    const buttons = user.trust_specials.map(account => [{ text: account.split('|')[0], callback_data: `trust_special_show_${account}` }]);
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_purchases' }]);

    return bot.sendMessage(chatId, 'üî• <b>–í–∞—à–∏ USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã:</b> üî•', {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: buttons
        }
    });
}

// –ú–æ–∏ AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã
async function sendMyAmMailsMenu(chatId) {
    const usersCollection = await users();
    const user = await usersCollection.findOne({ user_id: chatId });

    if (!user || !user.am_mails || user.am_mails.length === 0) {
        return bot.sendMessage(chatId,
            '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n' +
            '–ö—É–ø–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ AM (G) 5-24H!', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò üìÇ', callback_data: 'categories' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                    ]
                }
            });
    }

    const buttons = user.am_mails.map(account => [{ text: account.split('|')[0], callback_data: `am_mails_show_${account}` }]);
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_purchases' }]);

    return bot.sendMessage(chatId, 'üî• <b>–í–∞—à–∏ AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã:</b> üî•', {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: buttons
        }
    });
}

// –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function sendSupportMenu(chatId) {
    return bot.sendMessage(chatId,
        'üõ†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n' +
        '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n' +
        '@igor_Potekov\n\n' +
        '–ú—ã —Ä–µ—à–∏–º –ª—é–±—É—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                ]
            }
        });
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
setInterval(async () => {
    try {
        const usersCollection = await users();

        // TRUST SPECIAL
        const usersWithTrustSpecial = await usersCollection.find({
            "trust_special_transactions": { $exists: true }
        }).toArray();

        for (const user of usersWithTrustSpecial) {
            for (const [transactionId, transaction] of Object.entries(user.trust_special_transactions)) {
                if (transaction.status === 'pending' && transaction.invoiceId) {
                    const invoice = await checkTrustSpecialPayment(transaction.invoiceId);

                    if (invoice?.status === 'paid') {
                        await handleSuccessfulTrustSpecialPayment(user.user_id, transactionId);
                    } else if (invoice?.status === 'expired') {
                        await usersCollection.updateOne(
                            { user_id: user.user_id },
                            { $set: { [`trust_special_transactions.${transactionId}.status`]: 'expired' } }
                        );
                    }
                }
            }
        }

        // AM (G) 5-24H
        const usersWithAmMails = await usersCollection.find({
            "am_mails_transactions": { $exists: true }
        }).toArray();

        for (const user of usersWithAmMails) {
            for (const [transactionId, transaction] of Object.entries(user.am_mails_transactions)) {
                if (transaction.status === 'pending' && transaction.invoiceId) {
                    const invoice = await checkAmMailsPayment(transaction.invoiceId);

                    if (invoice?.status === 'paid') {
                        await handleSuccessfulAmMailsPayment(user.user_id, transactionId);
                    } else if (invoice?.status === 'expired') {
                        await usersCollection.updateOne(
                            { user_id: user.user_id },
                            { $set: { [`am_mails_transactions.${transactionId}.status`]: 'expired' } }
                        );
                    }
                }
            }
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π:', err);
    }
}, 10000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    try {
        const usersCollection = await users();
        await usersCollection.updateOne(
            { user_id: chatId },
            { $set: { last_seen: new Date() } }
        );

        if (data === 'back_to_main') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendMainMenu(chatId);
        }

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (data === 'categories') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendCategoriesMenu(chatId);
        }

        if (data === 'back_to_categories') {
            try {
                await bot.answerCallbackQuery(callbackQuery.id);
                return sendCategoriesMenu(chatId, callbackQuery.message.message_id);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', e);
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                return sendCategoriesMenu(chatId);
            }
        }

        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è TRUST SPECIAL
        if (data === 'trust_special_category') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendTrustSpecialMenu(chatId);
        }

        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è AM (G) 5-24H
        if (data === 'am_mails_category') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendAmMailsMenu(chatId);
        }

        // –ö—É–ø–∏—Ç—å TRUST SPECIAL
        if (data === 'buy_trust_special') {
            const trustSpecialCount = await (await trustSpecials()).countDocuments();
            if (trustSpecialCount === 0) {
                return bot.answerCallbackQuery(callbackQuery.id, {
                    text: 'USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    show_alert: true
                });
            }
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendTrustSpecialQuantityMenu(chatId);
        }

        // –ö—É–ø–∏—Ç—å AM (G) 5-24H
        if (data === 'buy_am_mails') {
            const amMailsCount = await (await amMails()).countDocuments();
            if (amMailsCount === 0) {
                return bot.answerCallbackQuery(callbackQuery.id, {
                    text: 'AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    show_alert: true
                });
            }
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendAmMailsQuantityMenu(chatId);
        }

        // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ TRUST SPECIAL
        if (data.startsWith('trust_special_quantity_')) {
            const quantity = parseInt(data.split('_')[3]);
            const invoiceUrl = await createTrustSpecialInvoice(chatId, quantity);

            if (!invoiceUrl) {
                return bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    show_alert: true
                });
            }

            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            await sendTrustSpecialPaymentMenu(chatId, invoiceUrl, quantity);
            return bot.answerCallbackQuery(callbackQuery.id);
        }

        // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ AM (G) 5-24H
        if (data.startsWith('am_mails_quantity_')) {
            const quantity = parseInt(data.split('_')[3]);
            const invoiceUrl = await createAmMailsInvoice(chatId, quantity);

            if (!invoiceUrl) {
                return bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    show_alert: true
                });
            }

            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            await sendAmMailsPaymentMenu(chatId, invoiceUrl, quantity);
            return bot.answerCallbackQuery(callbackQuery.id);
        }

        // –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TRUST SPECIAL
        if (data === 'trust_special_custom_quantity') {
            await bot.answerCallbackQuery(callbackQuery.id);
            await bot.deleteMessage(chatId, messageId);
            await bot.sendMessage(chatId, '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):');
            userStates[chatId] = { waitingForCustomQuantity: 'trust_special' };
            return;
        }

        // –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AM (G) 5-24H
        if (data === 'am_mails_custom_quantity') {
            await bot.answerCallbackQuery(callbackQuery.id);
            await bot.deleteMessage(chatId, messageId);
            await bot.sendMessage(chatId, '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):');
            userStates[chatId] = { waitingForCustomQuantity: 'am_mails' };
            return;
        }

        // –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ TRUST SPECIAL
        if (data === 'back_to_trust_special_quantity_menu') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendTrustSpecialQuantityMenu(chatId);
        }

        // –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ AM (G) 5-24H
        if (data === 'back_to_am_mails_quantity_menu') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendAmMailsQuantityMenu(chatId);
        }

        // –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏
        if (data === 'my_purchases') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendMyPurchasesMenu(chatId);
        }

        // –ú–æ–∏ TRUST SPECIAL
        if (data === 'my_trust_specials') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendMyTrustSpecialsMenu(chatId);
        }

        // –ú–æ–∏ AM (G) 5-24H
        if (data === 'my_am_mails') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendMyAmMailsMenu(chatId);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π TRUST SPECIAL –∞–∫–∫–∞—É–Ω—Ç
        if (data.startsWith('trust_special_show_')) {
            const account = data.replace('trust_special_show_', '');
            await bot.sendMessage(chatId,
                `üî• <b>–í–∞—à USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç:</b>\n<code>${account}</code>\n\n` +
                `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_trust_specials' }]
                        ]
                    }
                }
            );
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç
        if (data.startsWith('am_mails_show_')) {
            const account = data.replace('am_mails_show_', '');
            await bot.sendMessage(chatId,
                `üî• <b>–í–∞—à AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç:</b>\n<code>${account}</code>\n\n` +
                `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'my_am_mails' }]
                        ]
                    }
                }
            );
            return;
        }

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        if (data === 'support') {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            return sendSupportMenu(chatId);
        }

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback:', err);
        bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            show_alert: true
        });
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    const usersCollection = await users();
    await usersCollection.updateOne(
        { user_id: chatId },
        {
            $setOnInsert: {
                user_id: chatId,
                username: msg.from.username || '',
                first_name: msg.from.first_name || '',
                last_name: msg.from.last_name || '',
                first_seen: new Date(),
                last_seen: new Date(),
                trust_specials: [],
                am_mails: []
            }
        },
        { upsert: true }
    );

    await sendMainMenu(chatId, false, msg);
});

// –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.onText(/\/broadcast/, async (msg) => {
    if (!isAdmin(msg.from.id)) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const adminChatId = msg.chat.id;

    // –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await bot.sendMessage(adminChatId,
        'üì¢ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n' +
        '‚Ä¢ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n' +
        '‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n' +
        '‚Ä¢ –í–∏–¥–µ–æ\n' +
        '‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
        '‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n' +
        '‚Ä¢ –°—Ç–∏–∫–µ—Ä\n\n' +
        '–Ø –ø–µ—Ä–µ—à–ª—é —ç—Ç–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.',
        { parse_mode: 'HTML' }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    adminBroadcastState[adminChatId] = {
        waitingForContent: true,
        messageType: 'broadcast'
    };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (userStates[chatId]?.waitingForCustomQuantity && msg.text) {
        const inputQuantity = parseInt(msg.text.trim());
        if (isNaN(inputQuantity) || inputQuantity <= 0) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.');
            return;
        }

        if (userStates[chatId].waitingForCustomQuantity === 'trust_special') {
            const availableCount = await (await trustSpecials()).countDocuments();
            if (inputQuantity > availableCount) {
                await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${availableCount} —à—Ç.`);
                return;
            }

            const invoiceUrl = await createTrustSpecialInvoice(chatId, inputQuantity);
            if (!invoiceUrl) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                delete userStates[chatId];
                return;
            }

            await sendTrustSpecialPaymentMenu(chatId, invoiceUrl, inputQuantity);
        } else if (userStates[chatId].waitingForCustomQuantity === 'am_mails') {
            const availableCount = await (await amMails()).countDocuments();
            if (inputQuantity > availableCount) {
                await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${availableCount} —à—Ç.`);
                return;
            }

            const invoiceUrl = await createAmMailsInvoice(chatId, inputQuantity);
            if (!invoiceUrl) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                delete userStates[chatId];
                return;
            }

            await sendAmMailsPaymentMenu(chatId, invoiceUrl, inputQuantity);
        }

        delete userStates[chatId];
        return;
    }

    if (!msg.from || !adminBroadcastState[msg.chat.id] || !adminBroadcastState[msg.chat.id].waitingForContent) {
        return;
    }

    const adminChatId = msg.chat.id;
    const usersCollection = await users();
    const allUsers = await usersCollection.find({}).toArray();

    let success = 0;
    let failed = 0;

    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (msg.text && !msg.text.startsWith('/')) {
            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const user of allUsers) {
                try {
                    await bot.sendMessage(user.user_id, `üì¢ <b>–†–ê–°–°–´–õ–ö–ê:</b>\n\n${msg.text}`, {
                        parse_mode: 'HTML'
                    });
                    success++;
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        } else if (msg.photo) {
            // –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            const photo = msg.photo[msg.photo.length - 1]; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            const caption = msg.caption ? `üì¢ <b>–†–ê–°–°–´–õ–ö–ê:</b>\n\n${msg.caption}` : 'üì¢ <b>–†–ê–°–°–´–õ–ö–ê</b>';

            for (const user of allUsers) {
                try {
                    await bot.sendPhoto(user.user_id, photo.file_id, {
                        caption: caption,
                        parse_mode: 'HTML'
                    });
                    success++;
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        } else if (msg.video) {
            // –í–∏–¥–µ–æ
            const caption = msg.caption ? `üì¢ <b>–†–ê–°–°–´–õ–ö–ê:</b>\n\n${msg.caption}` : 'üì¢ <b>–†–ê–°–°–´–õ–ö–ê</b>';

            for (const user of allUsers) {
                try {
                    await bot.sendVideo(user.user_id, msg.video.file_id, {
                        caption: caption,
                        parse_mode: 'HTML'
                    });
                    success++;
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        } else if (msg.voice) {
            // –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const user of allUsers) {
                try {
                    await bot.sendVoice(user.user_id, msg.voice.file_id, {
                        caption: 'üì¢ <b>–†–ê–°–°–´–õ–ö–ê</b>',
                        parse_mode: 'HTML'
                    });
                    success++;
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        } else if (msg.document) {
            // –î–æ–∫—É–º–µ–Ω—Ç
            const caption = msg.caption ? `üì¢ <b>–†–ê–°–°–´–õ–ö–ê:</b>\n\n${msg.caption}` : 'üì¢ <b>–†–ê–°–°–´–õ–ö–ê</b>';

            for (const user of allUsers) {
                try {
                    await bot.sendDocument(user.user_id, msg.document.file_id, {
                        caption: caption,
                        parse_mode: 'HTML'
                    });
                    success++;
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        } else if (msg.sticker) {
            // –°—Ç–∏–∫–µ—Ä
            for (const user of allUsers) {
                try {
                    await bot.sendSticker(user.user_id, msg.sticker.file_id);
                    success++;
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        } else {
            await bot.sendMessage(adminChatId, '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
            delete adminBroadcastState[adminChatId];
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        await bot.sendMessage(adminChatId,
            `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n` +
            `üë• –ü–æ–ª—É—á–∏–ª–∏: ${success}\n` +
            `‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–∏: ${failed}\n` +
            `üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:', error);
        await bot.sendMessage(adminChatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ');
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete adminBroadcastState[adminChatId];
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
// ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TRUST SPECIAL –∞–∫–∫–∞—É–Ω—Ç–æ–≤ =====
bot.onText(/\/kz$/, async (msg) => {
    if (!isAdmin(msg.from.id)) return;

    bot.sendMessage(msg.chat.id, "üìÇ –û—Ç–ø—Ä–∞–≤—å .txt —Ñ–∞–π–ª —Å USA MIX 5-24H –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nemail|phone|username|key|country");
});

// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç) –¥–ª—è TRUST SPECIAL
bot.onText(/\/kz (.+)/, async (msg, match) => {
    if (!isAdmin(msg.from.id)) return;

    const trustSpecialsCollection = await trustSpecials();
    const newAccounts = match[1].split(',').map(e => e.trim()).filter(e => e);

    const toInsert = newAccounts.map(str => ({ raw: str }));

    const result = await trustSpecialsCollection.insertMany(toInsert, { ordered: false });
    const count = await trustSpecialsCollection.countDocuments();

    bot.sendMessage(msg.chat.id,
        `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.insertedCount}\nüî• –í—Å–µ–≥–æ USA MIX 5-24H: ${count}`);
});

// ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–æ–≤ =====
bot.onText(/\/am$/, async (msg) => {
    if (!isAdmin(msg.from.id)) return;

    bot.sendMessage(msg.chat.id, "üìÇ –û—Ç–ø—Ä–∞–≤—å .txt —Ñ–∞–π–ª —Å AM (G) 5-24H –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nemail|phone|username|key|country");
});

// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç) –¥–ª—è AM (G) 5-24H
bot.onText(/\/am (.+)/, async (msg, match) => {
    if (!isAdmin(msg.from.id)) return;

    const amMailsCollection = await amMails();
    const newAccounts = match[1].split(',').map(e => e.trim()).filter(e => e);

    const toInsert = newAccounts.map(str => ({ raw: str }));

    const result = await amMailsCollection.insertMany(toInsert, { ordered: false });
    const count = await amMailsCollection.countDocuments();

    bot.sendMessage(msg.chat.id,
        `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.insertedCount}\nüî• –í—Å–µ–≥–æ AM (G) 5-24H: ${count}`);
});

// –ï—Å–ª–∏ –∫–∏–¥–∞—é—Ç —Ñ–∞–π–ª .txt –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /kz –∏–ª–∏ /am
bot.on('document', async (msg) => {
    if (!isAdmin(msg.from.id)) return;

    const fileId = msg.document.file_id;
    const fileName = msg.document.file_name || "";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if (!fileName.endsWith(".txt")) {
        return bot.sendMessage(msg.chat.id, "‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt");
    }

    try {
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_TOKEN}/${file.file_path}`;

        const res = await fetch(fileUrl);
        const text = await res.text();

        const lines = text.split(/\r?\n/).map(l => l.trim()).filter(l => l);

        if (!lines.length) {
            return bot.sendMessage(msg.chat.id, "‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π!");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è /kz –∏–ª–∏ /am
        if (adminBroadcastState[msg.chat.id]?.waitingForContent) {
            return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∂–¥–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        }

        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã (/kz –∏–ª–∏ /am)
        const lastCommand = adminBroadcastState[msg.chat.id]?.lastCommand || 'kz'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é /kz
        let collection, categoryName;

        if (lastCommand === 'am') {
            collection = await amMails();
            categoryName = 'AM (G) 5-24H';
        } else {
            collection = await trustSpecials();
            categoryName = 'USA MIX 5-24H';
        }

        const toInsert = lines.map(str => ({ raw: str }));
        const result = await collection.insertMany(toInsert, { ordered: false });
        const count = await collection.countDocuments();

        bot.sendMessage(msg.chat.id,
            `‚úÖ –ò–∑ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${result.insertedCount}\nüî• –í—Å–µ–≥–æ ${categoryName}: ${count}`);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:", err);
        bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞");
    }
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.onText(/\/(kz|am)$/, async (msg, match) => {
    if (!isAdmin(msg.from.id)) return;

    const command = match[1];
    adminBroadcastState[msg.chat.id] = { lastCommand: command };
    bot.sendMessage(msg.chat.id, `üìÇ –û—Ç–ø—Ä–∞–≤—å .txt —Ñ–∞–π–ª —Å ${command === 'kz' ? 'USA MIX 5-24H' : 'AM (G) 5-24H'} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nemail|phone|username|key|country`);
});

// –°—Ç–∞—Ç—É—Å –ø—É–ª–∞ TRUST SPECIAL –∏ AM (G) 5-24H
bot.onText(/\/trust_status/, async (msg) => {
    if (!isAdmin(msg.from.id)) return;

    const trustSpecialsCollection = await trustSpecials();
    const amMailsCollection = await amMails();
    const trustSpecialCount = await trustSpecialsCollection.countDocuments();
    const amMailsCount = await amMailsCollection.countDocuments();
    const trustSpecialFirst50 = await trustSpecialsCollection.find().limit(50).toArray();
    const amMailsFirst50 = await amMailsCollection.find().limit(50).toArray();

    let message = `üî• –í—Å–µ–≥–æ USA MIX 5-24H: ${trustSpecialCount}\n\n`;
    message += trustSpecialFirst50.map(e => e.raw).join('\n');
    if (trustSpecialCount > 50) message += '\n\n...–∏ –¥—Ä—É–≥–∏–µ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50)';

    message += `\n\nüî• –í—Å–µ–≥–æ AM (G) 5-24H: ${amMailsCount}\n\n`;
    message += amMailsFirst50.map(e => e.raw).join('\n');
    if (amMailsCount > 50) message += '\n\n...–∏ –¥—Ä—É–≥–∏–µ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50)';

    bot.sendMessage(msg.chat.id, message);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
bot.onText(/\/db_status/, async (msg) => {
    if (!isAdmin(msg.from.id)) return;

    try {
        const db = await connect();
        const stats = await db.command({ dbStats: 1 });
        const trustSpecialCount = await (await trustSpecials()).countDocuments();
        const amMailsCount = await (await amMails()).countDocuments();

        bot.sendMessage(msg.chat.id,
            `üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n` +
            `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n` +
            `üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã: ${(stats.dataSize / 1024).toFixed(2)} KB\n` +
            `üî• USA MIX 5-24H –≤ –ø—É–ª–µ: ${trustSpecialCount}\n` +
            `üî• AM (G) 5-24H –≤ –ø—É–ª–µ: ${amMailsCount}\n` +
            `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${await (await users()).countDocuments()}`,
            { parse_mode: 'HTML' });
    } catch (e) {
        bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}`);
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
console.log('Bot —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling (DigitalOcean)');

app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä health-check –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('üíé –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});